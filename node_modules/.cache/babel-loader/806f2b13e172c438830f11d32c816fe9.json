{"ast":null,"code":"import _objectSpread from\"/home/linux/learn with sumit/4/think-in-a-redux-way/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/linux/learn with sumit/4/think-in-a-redux-way/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{ADDED,ALLCOMPLETED,CLEARCOMPLETED,COLORSELECTED,DELETED,LOADED,TOGGLED}from\"./actionTypes\";import initialState from\"./initialState\";var nextTodoId=function nextTodoId(todos){var maxId=todos.reduce(function(maxId,todo){return Math.max(todo.id,maxId);},-1);return maxId+1;};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case LOADED:return action.payload;case ADDED:return[].concat(_toConsumableArray(state),[{id:nextTodoId(state),text:action.payload,completed:false}]);case TOGGLED:return state.map(function(todo){if(todo.id!==action.payload){return todo;}return _objectSpread(_objectSpread({},todo),{},{completed:!todo.completed});});case COLORSELECTED:var _action$payload=action.payload,todoId=_action$payload.todoId,color=_action$payload.color;return state.map(function(todo){if(todo.id!==todoId){return todo;}return _objectSpread(_objectSpread({},todo),{},{color:color});});case DELETED:return state.filter(function(todo){return todo.id!==action.payload;});case ALLCOMPLETED:return state.map(function(todo){return _objectSpread(_objectSpread({},todo),{},{completed:true});});case CLEARCOMPLETED:return state.filter(function(todo){return!todo.completed;});default:return state;}};export default reducer;","map":{"version":3,"sources":["/home/linux/learn with sumit/4/think-in-a-redux-way/src/redux/todos/reducer.js"],"names":["ADDED","ALLCOMPLETED","CLEARCOMPLETED","COLORSELECTED","DELETED","LOADED","TOGGLED","initialState","nextTodoId","todos","maxId","reduce","todo","Math","max","id","reducer","state","action","type","payload","text","completed","map","todoId","color","filter"],"mappings":"yRAAA,OACIA,KADJ,CAEIC,YAFJ,CAGIC,cAHJ,CAIIC,aAJJ,CAKIC,OALJ,CAOIC,MAPJ,CASIC,OATJ,KAUO,eAVP,CAWA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC1B,GAAMC,CAAAA,KAAK,CAAGD,KAAK,CAACE,MAAN,CAAa,SAACD,KAAD,CAAQE,IAAR,QAAiBC,CAAAA,IAAI,CAACC,GAAL,CAASF,IAAI,CAACG,EAAd,CAAkBL,KAAlB,CAAjB,EAAb,CAAwD,CAAC,CAAzD,CAAd,CACA,MAAOA,CAAAA,KAAK,CAAG,CAAf,CACH,CAHD,CAKA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBV,YAAyB,IAAXW,CAAAA,MAAW,2CAC9C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKd,CAAAA,MAAL,CACM,MAAQa,CAAAA,MAAM,CAACE,OAAf,CAMJ,IAAKpB,CAAAA,KAAL,CACI,mCACOiB,KADP,GAEI,CACIF,EAAE,CAAEP,UAAU,CAACS,KAAD,CADlB,CAEII,IAAI,CAAEH,MAAM,CAACE,OAFjB,CAGIE,SAAS,CAAE,KAHf,CAFJ,GASJ,IAAKhB,CAAAA,OAAL,CACI,MAAOW,CAAAA,KAAK,CAACM,GAAN,CAAU,SAACX,IAAD,CAAU,CACvB,GAAIA,IAAI,CAACG,EAAL,GAAYG,MAAM,CAACE,OAAvB,CAAgC,CAC5B,MAAOR,CAAAA,IAAP,CACH,CAED,sCACOA,IADP,MAEIU,SAAS,CAAE,CAACV,IAAI,CAACU,SAFrB,GAIH,CATM,CAAP,CAWJ,IAAKnB,CAAAA,aAAL,CACI,oBAA0Be,MAAM,CAACE,OAAjC,CAAQI,MAAR,iBAAQA,MAAR,CAAgBC,KAAhB,iBAAgBA,KAAhB,CACA,MAAOR,CAAAA,KAAK,CAACM,GAAN,CAAU,SAACX,IAAD,CAAU,CACvB,GAAIA,IAAI,CAACG,EAAL,GAAYS,MAAhB,CAAwB,CACpB,MAAOZ,CAAAA,IAAP,CACH,CACD,sCACOA,IADP,MAEIa,KAAK,CAAEA,KAFX,GAIH,CARM,CAAP,CAUJ,IAAKrB,CAAAA,OAAL,CACI,MAAOa,CAAAA,KAAK,CAACS,MAAN,CAAa,SAACd,IAAD,QAAUA,CAAAA,IAAI,CAACG,EAAL,GAAYG,MAAM,CAACE,OAA7B,EAAb,CAAP,CAEJ,IAAKnB,CAAAA,YAAL,CACI,MAAOgB,CAAAA,KAAK,CAACM,GAAN,CAAU,SAACX,IAAD,CAAU,CACvB,sCACOA,IADP,MAEIU,SAAS,CAAE,IAFf,GAIH,CALM,CAAP,CAOJ,IAAKpB,CAAAA,cAAL,CACI,MAAOe,CAAAA,KAAK,CAACS,MAAN,CAAa,SAACd,IAAD,QAAU,CAACA,IAAI,CAACU,SAAhB,EAAb,CAAP,CAEJ,QACI,MAAOL,CAAAA,KAAP,CAzDR,CA2DH,CA5DD,CA8DA,cAAeD,CAAAA,OAAf","sourcesContent":["import {\n    ADDED,\n    ALLCOMPLETED,\n    CLEARCOMPLETED,\n    COLORSELECTED,\n    DELETED,\n     \n    LOADED,\n     \n    TOGGLED,\n} from \"./actionTypes\";\nimport initialState from \"./initialState\";\n\nconst nextTodoId = (todos) => {\n    const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\n    return maxId + 1;\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n      case LOADED:\n            return  action.payload\n                \n          \n                \n            \n\n        case ADDED:\n            return [\n                ...state,\n                {\n                    id: nextTodoId(state),\n                    text: action.payload,\n                    completed: false,\n                },\n            ];\n\n        case TOGGLED:\n            return state.map((todo) => {\n                if (todo.id !== action.payload) {\n                    return todo;\n                }\n\n                return {\n                    ...todo,\n                    completed: !todo.completed,\n                };\n            });\n\n        case COLORSELECTED:\n            const { todoId, color } = action.payload;\n            return state.map((todo) => {\n                if (todo.id !== todoId) {\n                    return todo;\n                }\n                return {\n                    ...todo,\n                    color: color,\n                };\n            });\n\n        case DELETED:\n            return state.filter((todo) => todo.id !== action.payload);\n\n        case ALLCOMPLETED:\n            return state.map((todo) => {\n                return {\n                    ...todo,\n                    completed: true,\n                };\n            });\n\n        case CLEARCOMPLETED:\n            return state.filter((todo) => !todo.completed);\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}