{"ast":null,"code":"import { COLORCHANGED, STATUSCHANGED } from \"./actionTypes\";\nimport initialState from \"./initialState\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case STATUSCHANGED:\n      return { ...state,\n        status: action.payload\n      };\n\n    case COLORCHANGED:\n      const {\n        color,\n        changeType\n      } = action.payload;\n\n      switch (changeType) {\n        case \"added\":\n          return { ...state,\n            colors: [...state.colors, color]\n          };\n\n        case \"removed\":\n          return { ...state,\n            colors: state.colors.filter(existingColor => existingColor !== color)\n          };\n\n        default:\n          return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/linux/learn with sumit/4/think-in-a-redux-way/src/redux/filters/reducer.js"],"names":["COLORCHANGED","STATUSCHANGED","initialState","reducer","state","action","type","status","payload","color","changeType","colors","filter","existingColor"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,aAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHG,QAAAA,MAAM,EAAEF,MAAM,CAACG;AAFZ,OAAP;;AAKJ,SAAKR,YAAL;AACI,YAAM;AAAES,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAwBL,MAAM,CAACG,OAArC;;AAEA,cAAQE,UAAR;AACI,aAAK,OAAL;AACI,iBAAO,EACH,GAAGN,KADA;AAEHO,YAAAA,MAAM,EAAE,CAAC,GAAGP,KAAK,CAACO,MAAV,EAAkBF,KAAlB;AAFL,WAAP;;AAKJ,aAAK,SAAL;AACI,iBAAO,EACH,GAAGL,KADA;AAEHO,YAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,CAAaC,MAAb,CACHC,aAAD,IAAmBA,aAAa,KAAKJ,KADjC;AAFL,WAAP;;AAOJ;AACI,iBAAOL,KAAP;AAhBR;;AAmBJ;AACI,aAAOA,KAAP;AA9BR;AAgCH,CAjCD;;AAmCA,eAAeD,OAAf","sourcesContent":["import { COLORCHANGED, STATUSCHANGED } from \"./actionTypes\";\nimport initialState from \"./initialState\";\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case STATUSCHANGED:\n            return {\n                ...state,\n                status: action.payload,\n            };\n\n        case COLORCHANGED:\n            const { color, changeType } = action.payload;\n\n            switch (changeType) {\n                case \"added\":\n                    return {\n                        ...state,\n                        colors: [...state.colors, color],\n                    };\n\n                case \"removed\":\n                    return {\n                        ...state,\n                        colors: state.colors.filter(\n                            (existingColor) => existingColor !== color\n                        ),\n                    };\n\n                default:\n                    return state;\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}