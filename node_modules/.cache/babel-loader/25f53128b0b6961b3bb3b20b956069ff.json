{"ast":null,"code":"import _asyncToGenerator from\"/home/linux/learn with sumit/4/think-in-a-redux-way/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/home/linux/learn with sumit/4/think-in-a-redux-way/node_modules/@babel/runtime/regenerator/index.js\";import{added}from\"../actions\";var addedToDb=function addedToDb(addedText){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,todo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:9000/todos\",{method:\"POST\",body:JSON.stringify({text:addedText,completed:false}),headers:{\"Content-type\":\"application/json;charset=UTF-8\"}});case 2:response=_context.sent;_context.next=5;return response.json();case 5:todo=_context.sent;dispatch(added(todo.text));case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export default addedToDb;","map":{"version":3,"sources":["/home/linux/learn with sumit/4/think-in-a-redux-way/src/redux/todos/thunk/addedTodb.js"],"names":["added","addedToDb","addedText","dispatch","fetch","method","body","JSON","stringify","text","completed","headers","response","json","todo"],"mappings":"qRAAA,OAASA,KAAT,KAAqB,YAArB,CAIA,GAAMC,CAAAA,SAAS,CAAE,QAAXA,CAAAA,SAAW,CAACC,SAAD,CAAa,CAC1B,+FAAQ,iBAAMC,QAAN,0JACcC,CAAAA,KAAK,CAAC,6BAAD,CAA+B,CACtDC,MAAM,CAAC,MAD+C,CAEtDC,IAAI,CAACC,IAAI,CAACC,SAAL,CAAe,CAChBC,IAAI,CAACP,SADW,CAEhBQ,SAAS,CAAC,KAFM,CAAf,CAFiD,CAMrDC,OAAO,CAAC,CAAC,eAAe,gCAAhB,CAN6C,CAA/B,CADnB,QACFC,QADE,qCASUA,CAAAA,QAAQ,CAACC,IAAT,EATV,QASFC,IATE,eAURX,QAAQ,CAACH,KAAK,CAACc,IAAI,CAACL,IAAN,CAAN,CAAR,CAVQ,sDAAR,+DAYH,CAbD,CAeA,cAAeR,CAAAA,SAAf","sourcesContent":["import { added} from \"../actions\";\n\n \n\nconst addedToDb =(addedText)=>{\n    return  async(dispatch) => {\n    const response= await fetch(\"http://localhost:9000/todos\",{\n        method:\"POST\",\n        body:JSON.stringify({\n            text:addedText,\n            completed:false,\n        })\n        ,headers:{\"Content-type\":\"application/json;charset=UTF-8\"}\n    })\n    const todo= await response.json()\n    dispatch(added(todo.text))\n};\n}\n\nexport default addedToDb;"]},"metadata":{},"sourceType":"module"}